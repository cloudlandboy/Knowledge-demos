[main]
# sessionIdCookie 是 sessionManager 创建会话 Cookie 的模板(默认的)
#sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie

# 设置 Cookie 名字，默认为 JSESSIONID
#sessionIdCookie.name=sid

#sessionIdCookie.domain=example.com
#sessionIdCookie.path=

# 设置 Cookie 的过期时间，秒为单位，默认 -1 表示关闭浏览器时过期 Cookie
#sessionIdCookie.maxAge=1800

# 如果设置为 true，则客户端不会暴露给客户端脚本代码（默认true）
#sessionIdCookie.httpOnly=true

#sessionManager.sessionIdCookie=$sessionIdCookie

# 是否启用/禁用 SessionIdCookie，默认是启用的；如果禁用后将不会设置 SessionIdCookie，即默认使用了 Servlet 容器的 JSESSIONID，且通过URL重写（URL中的 “;JSESSIONID=id” 部分）保存 Session Id
#sessionManager.sessionIdCookieEnabled=false

sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager.sessionIdCookie.name=sid
# 设置会话的全局过期时间（毫秒为单位），默认30分钟
sessionManager.globalSessionTimeout=20000

# 默认是ServletContainerSessionManager
securityManager.sessionManager=$sessionManager

# 设置会话监听器
sessionListener1=MySessionListener1
sessionListener2=MySessionListener2
sessionManager.sessionListeners=$sessionListener1,$sessionListener2

# Shiro 提供 SessionDAO 用于会话 的 CRUD,CachingSessionDAO 提供了对开发者透明的会话缓存的功能，只需要设置相应的 CacheManager 即可
# - MemorySessionDAO直接在内存中进行会话维护(默认的SessionDAO)
# - EnterpriseCacheSessionDAO 提供了缓存功能的会话维护，默认情况下使用 MapCache 实现，内部使用 ConcurrentHashMap 保存缓存的会话
# -SessionDAO，继承CachingSessionDAO即可
sessionDAO=MySessionDAO

# 设置 Session 缓存名字，默认就是 shiro-activeSessionCache；
#sessionDAO.activeSessionsCacheName=shiro-activeSessionCache

# 用于生成会话ID，默认就是 JavaUuidSessionIdGenerator，使用 java.util.UUID 生成
#sessionIdGenerator=org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator
#sessionDAO.sessionIdGenerator=$sessionIdGenerator

sessionManager.sessionDAO=$sessionDAO

# 缓存管理器，用于管理缓存的，此处使用 Ehcache 实现；
cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager

# 设置 ehcache 缓存的配置文件
cacheManager.cacheManagerConfigFile=classpath:p04/ehcache.xml

# 设置 SecurityManager 的 cacheManager，会自动设置实现了 CacheManagerAware 接口的相应对象，如 SessionDAO 的 cacheManager；
securityManager.cacheManager=$cacheManager

# Shiro 提供了会话验证调度器，用于定期的验证会话是否已过期(默认没有配置)
# - ExecutorServiceSessionValidationScheduler：其使用 JDK 的 ScheduledExecutorService 进行定期调度并验证会话是否过期（自带实现）
# - QuartzSessionValidationScheduler：Shiro 也提供了使用 Quartz 会话验证调度器（需要引入shiro-quartz包）

sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
sessionValidationScheduler.sessionManager=$sessionManager
sessionManager.sessionValidationScheduler=$sessionValidationScheduler
# 是否开启会话验证器，默认是开启的
#sessionManager.sessionValidationSchedulerEnabled=true

# 设置调度时间间隔，单位毫秒，默认就是1小时
sessionManager.sessionValidationScheduler.interval = 30000

# 会话过期时删除过期的会话,默认是开启的，在会话过期后会调用 SessionDAO 的 delete 方法删除会话
#sessionManager.deleteInvalidSessions=true

# ================================================================================================
authc.loginUrl=/formfilterlogin
authc.usernameParam=username
authc.passwordParam=password
authc.successUrl=/jsp-tag
authc.failureKeyAttribute=shiroLoginFailure
logout.redirectUrl=/formfilterlogin
invalidRequest.blockSemicolon=false
[users]
zhang=123,admin
wang=123
[roles]
admin=user:*,menu:*
[urls]
/jsp-tag=anon
/session=anon
/favicon.ico=anon
# 交给shiro验证登录
/formfilterlogin=authc
/logout=logout
/**=authc

